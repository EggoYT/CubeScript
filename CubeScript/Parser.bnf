%lex

%%

\s+											%empty
[;]											NEXT
((var\s)|(val\s))							Declare
((Int)|(Float)|(String)|(Boolean))			Type
((true)|(false))							Boolean
((\d*\.\d*[fF]{0,1})|(\d+[fF]))				Float
(\d+)										Int
\"[^\"]*\"									String
[_a-zA-Z][_a-zA-Z0-9]{0,}					VAR_NAME

/lex

%{

#include <string>
#include <vector>
#include "Result.h"
#include "Nodes/Types.h"
#include "Nodes/Variables.h"
#include "Nodes/Expressions.h"

using Value = syntax::NodeRef;

%}

%right NEXT
%right '='
%left '<' '==' '>'
%left '+' '-'
%left '*' '/'
%left ':'
%left ','
%left '(' ')'
%left 'else'
%left 'while'

\lex

%%

Expression
	: Expression NEXT Expression { $$ = new ValueList($1, $3) }
	| Expression NEXT { $$ = $1 }
	| VarRefExpression
	| CondExpression
	| LoopExpression
	| '{' Expression '}' { $$ = new Scope($2); }
	| '{' '}' { $$ = nullptr }
	| NEXT { $$ = nullptr }
	;

CondExpression
	: 'if' '(' Value ')' Expression { $$ = new Condition($3, $5) }
	| 'if' '(' Value ')' Expression 'else' Expression { $$ = new Condition($3, $5, $7) }
	;

LoopExpression
	: 'for' '(' Value ')' Expression { $$ = new ForLoop($3, $5) }
	| 'for' '(' Value ')' Expression 'else' Expression { $$ = new ForLoop($3, $5, $7) }
	| 'while' '(' Value ')' Expression { $$ = new WhileLoop($3, $5) }
	| 'while' '(' Value ')' Expression 'else' Expression { $$ = new WhileLoop($3, $5, $7) }
	| 'do' Expression 'while' '(' Value ')' { $$ = new DoWhileLoop($5, $2) }
	| 'do' Expression 'while' '(' Value ')' 'else' Expression { $$ = new DoWhileLoop($5, $2, $8) }
	;

VarRefExpression
	: VarRefExpression '=' VarRefExpression { $$ = new Assignation($1, $3) }
	| VAR_NAME '(' ValueList ')' { $$ = new FunctionCall(new Function($1), $3) }
	| VarDeclaration
	| Value
	;

VarDeclaration
	: Declare Var ':' Type { $$ = new Declaration($2, $1, $4) }
	| Declare Var { $$ = new Declaration($2, $1) }
	;

ValueList
	: Value ',' ValueList { $$ = new ValueList($1, $3) }
	| Value
	;

Value
	: Value '+' Value { $$ = new Operator(OperatorType::ADD, $1, $3) }
	| Value '-' Value { $$ = new Operator(OperatorType::SUB, $1, $3) }
	| Value '*' Value { $$ = new Operator(OperatorType::MUL, $1, $3) }
	| Value '/' Value { $$ = new Operator(OperatorType::DIV, $1, $3) }
	| Value '<' Value { $$ = new Operator(OperatorType::LESS, $1, $3) }
	| Value '==' Value { $$ = new Operator(OperatorType::EQUAL, $1, $3) }
	| Value '>' Value { $$ = new Operator(OperatorType::GREATER, $1, $3) }
	| Var
	| Literal
	;

Var
	: VAR_NAME { $$ = new Variable($1) }
	;

Literal
	: Float { $$ = new Float(std::stod($1)) }
	| Int { $$ = new Int(std::stoll($1)) }
	| '-' Float { $$ = new Float(-std::stod($2)) }
	| '-' Int { $$ = new Int(-std::stoll($2)) }
	| String { $$ = new String($1.substr(1, $1.size() - 2)) }
	| Boolean { $$ = new Boolean($1) }
	;